(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{460:function(n,e,s){"use strict";s.r(e);var o=s(54),t=Object(o.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("Vue3中使用pnpm workspace来实现monorepo (pnpm是快速、节省磁盘空间的包管理器。主要采用符号链接的方式管理模块)")]),n._v(" "),s("p",[n._v("#全局安装pnpm\nnpm install pnpm -g # 全局安装pnpm\npnpm init -y # 初始化配置文件\n#创建.npmrc文件\nshamefully-hoist = true\n这里您可以尝试一下安装Vue3, pnpm install vue@next此时默认情况下vue3中依赖的模块不会被提升到node_modules下。 添加羞耻的提升可以将Vue3，所依赖的模块提升到node_modules中")]),n._v(" "),s("p",[n._v("#配置workspace\n新建 pnpm-workspace.yaml")]),n._v(" "),s("p",[n._v("packages:")]),n._v(" "),s("ul",[s("li",[n._v("'packages/*'\n将packages下所有的目录都作为包进行管理。这样我们的Monorepo就搭建好了。确实比lerna + yarn workspace更快捷")])]),n._v(" "),s("p",[n._v("#环境搭建\n打包项目Vue3采用rollup进行打包代码，安装打包所需要的依赖")]),n._v(" "),s("p",[n._v("依赖\t\ntypescript\t在项目中支持Typescript\nrollup\t打包工具\nrollup-plugin-typescript2\trollup 和 ts的 桥梁\n@rollup/plugin-json\t支持引入json\n@rollup/plugin-node-resolve\t解析node第三方模块\n@rollup/plugin-commonjs\t将CommonJS转化为ES6Module\nminimist\t命令行参数解析\nexeca@4\t开启子进程\npnpm install typescript rollup rollup-plugin-typescript2 @rollup/plugin-json @rollup/plugin-node-resolve @rollup/plugin-commonjs minimist execa@4 esbuild   -D -w\n#初始化TS\npnpm tsc --init\n先添加些常用的ts-config配置，后续需要其他的在继续增加")]),n._v(" "),s("p",[n._v('{\n"compilerOptions": {\n"outDir": "dist", // 输出的目录\n"sourceMap": true, // 采用sourcemap\n"target": "es2016", // 目标语法\n"module": "esnext", // 模块格式\n"moduleResolution": "node", // 模块解析方式\n"strict": false, // 严格模式\n"resolveJsonModule": true, // 解析json模块\n"esModuleInterop": true, // 允许通过es6语法引入commonjs模块\n"jsx": "preserve", // jsx 不转义\n"lib": ["esnext", "dom"], // 支持的类库 esnext及dom\n}\n}\n#创建模块\n我们现在packages目录下新建两个package，用于下一章手写响应式原理做准备')]),n._v(" "),s("p",[n._v("reactivity 响应式模块\nshared 共享模块\n所有包的入口均为src/index.ts 这样可以实现统一打包")]),n._v(" "),s("p",[n._v("reactivity/package.json")]),n._v(" "),s("p",[n._v('{\n"name": "@vue/reactivity",\n"version": "1.0.0",\n"main": "index.js",\n"module":"dist/reactivity.esm-bundler.js",\n"unpkg": "dist/reactivity.global.js",\n"buildOptions": {\n"name": "VueReactivity",\n"formats": [\n"esm-bundler",\n"cjs",\n"global"\n]\n}\n}\nshared/package.json')]),n._v(" "),s("p",[n._v('{\n"name": "@vue/shared",\n"version": "1.0.0",\n"main": "index.js",\n"module": "dist/shared.esm-bundler.js",\n"buildOptions": {\n"formats": [\n"esm-bundler",\n"cjs"\n]\n}\n}\nformats为自定义的打包格式，有esm-bundler在构建工具中使用的格式、esm-browser在浏览器中使用的格式、cjs在node中使用的格式、global立即执行函数的格式')]),n._v(" "),s("p",[n._v("pnpm install @vue/shared@workspace --filter @vue/reactivity\n配置ts引用关系")]),n._v(" "),s("p",[n._v('"baseUrl": ".",\n"paths": {\n"@vue/'),s("em",[n._v('": ["packages/')]),n._v('/src"]\n}\n#开发环境esbuild打包\n创建开发时执行脚本， 参数为要打包的模块')]),n._v(" "),s("p",[n._v("解析用户参数")]),n._v(" "),s("p",[n._v("\"scripts\": {\n\"dev\": \"node scripts/dev.js reactivity -f global\"\n}\nconst { build } = require('esbuild')\nconst { resolve } = require('path')\nconst args = require('minimist')(process.argv.slice(2));")]),n._v(" "),s("p",[n._v("const target = args._[0] || 'reactivity';\nconst format = args.f || 'global';")]),n._v(" "),s("p",[n._v("const pkg = require(resolve(__dirname, "),s("code",[n._v("../packages/${target}/package.json")]),n._v("));")]),n._v(" "),s("p",[n._v("const outputFormat = format.startsWith('global')// 输出的格式\n? 'iife'\n: format === 'cjs'\n? 'cjs'\n: 'esm'")]),n._v(" "),s("p",[n._v("const outfile = resolve( // 输出的文件\n__dirname,\n"),s("code",[n._v("../packages/${target}/dist/${target}.${format}.js")]),n._v("\n)")]),n._v(" "),s("p",[n._v("build({\nentryPoints: [resolve(__dirname, "),s("code",[n._v("../packages/${target}/src/index.ts")]),n._v(")],\noutfile,\nbundle: true,\nsourcemap: true,\nformat: outputFormat,\nglobalName: pkg.buildOptions?.name,\nplatform: format === 'cjs' ? 'node' : 'browser',\nwatch: { // 监控文件变化\nonRebuild(error) {\nif (!error) console.log("),s("code",[n._v("rebuilt~~~~")]),n._v(")\n}\n}\n}).then(() => {\nconsole.log('watching~~~')\n})\n#生产环境rollup打包\n#rollup.config.js\nimport path from 'path';\n// 获取packages目录\nconst packagesDir = path.resolve(__dirname, 'packages');\n// 获取对应的模块\nconst packageDir = path.resolve(packagesDir, process.env.TARGET);\n// 全部以打包目录来解析文件\nconst resolve = p => path.resolve(packageDir, p);\nconst pkg = require(resolve('package.json'));\nconst name = path.basename(packageDir); // 获取包的名字")]),n._v(" "),s("p",[n._v("// 配置打包信息\nconst outputConfigs = {\n'esm-bundler': {\nfile: resolve("),s("code",[n._v("dist/${name}.esm-bundler.js")]),n._v("),\nformat: 'es'\n},\ncjs: {\nfile: resolve("),s("code",[n._v("dist/${name}.cjs.js")]),n._v("),\nformat: 'cjs'\n},\nglobal: {\nfile: resolve("),s("code",[n._v("dist/${name}.global.js")]),n._v("),\nformat: 'iife'\n}\n}\n// 获取formats\nconst packageFormats = process.env.FORMATS &&  process.env.FORMATS.split(',');\nconst packageConfigs =  packageFormats || pkg.buildOptions.formats;")]),n._v(" "),s("p",[n._v("import json from '@rollup/plugin-json'\nimport commonjs from '@rollup/plugin-commonjs';\nimport {nodeResolve} from '@rollup/plugin-node-resolve'\nimport tsPlugin from 'rollup-plugin-typescript2'")]),n._v(" "),s("p",[n._v("function createConfig(format,output){\noutput.sourcemap = process.env.SOURCE_MAP;\noutput.exports = 'named';\nlet external = []\nif(format === 'global'){\noutput.name = pkg.buildOptions.name\n}else{ // cjs/esm 不需要打包依赖文件\nexternal = [...Object.keys(pkg.dependencies || {})]\n}\nreturn {\ninput:resolve('src/index.ts'),\noutput,\nexternal,\nplugins:[\njson(),\ntsPlugin(),\ncommonjs(),\nnodeResolve()\n]\n}\n}\n// 开始打包把\nexport default packageConfigs.map(format=> createConfig(format,outputConfigs[format]));\n#build.js\nconst fs = require('fs');\nconst execa = require('execa')\nconst targets = fs.readdirSync('packages').filter(f => {\nif (!fs.statSync("),s("code",[n._v("packages/${f}")]),n._v(").isDirectory()) {\nreturn false;\n}\nreturn true;\n});\nasync function runParallel(source, iteratorFn) {\nconst ret = [];\nfor (const item of source) {\nconst p = Promise.resolve().then(() => iteratorFn(item))\nret.push(p);\n}\nreturn Promise.all(ret)\n}\nasync function build(target) {\nawait execa(\n'rollup',\n[\n'-c',\n'--environment',\n"),s("code",[n._v("TARGET:${target}")]),n._v("\n],\n{ stdio: 'inherit' }\n)\n}\nrunParallel(targets, build)")])])}),[],!1,null,null,null);e.default=t.exports}}]);